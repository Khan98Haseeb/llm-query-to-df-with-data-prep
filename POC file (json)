{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "493b10ac",
   "metadata": {},
   "source": [
    "# Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "138e9790",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "import numpy as np\n",
    "from faker import Faker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a4090821",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "fb7d1ce4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from langchain_google_genai import ChatGoogleGenerativeAI\n",
    "from langchain_core.messages import HumanMessage\n",
    "from langchain.prompts import PromptTemplate\n",
    "from langchain.chains import LLMChain\n",
    "\n",
    "from langchain_community.agent_toolkits import SQLDatabaseToolkit\n",
    "from langchain_community.agent_toolkits.sql.base import create_sql_agent\n",
    "from langchain_community.utilities import SQLDatabase\n",
    "\n",
    "from langchain_experimental.sql import SQLDatabaseChain\n",
    "\n",
    "from langchain.embeddings import HuggingFaceEmbeddings\n",
    "\n",
    "from langchain.vectorstores import FAISS\n",
    "\n",
    "from langchain.prompts import SemanticSimilarityExampleSelector\n",
    "from langchain.prompts import PromptTemplate\n",
    "from langchain.prompts import FewShotPromptTemplate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2e8a0617",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install --upgrade langchain\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c516ab49",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from langchain.agents import initialize_agent, Tool\n",
    "from langchain.agents.agent_types import AgentType\n",
    "from langchain_experimental.tools.python.tool import PythonREPLTool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "16c7f8f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install faiss-cpu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "53b0e564",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install sentence-transformers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf2b1482",
   "metadata": {},
   "source": [
    "# Create a database"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "802b49ab",
   "metadata": {},
   "source": [
    "## Generate sample data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "596ee12c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Order_ID  Order_Date  Customer_ID  Customer_Name            Customer_Email  \\\n",
      "0      1094  2025-04-04          554  Robert Hebert   zvillarreal@example.net   \n",
      "1      1001  2025-03-23          537    Paul Thomas        yrubio@example.net   \n",
      "2      1014  2025-04-15          586   Megan Martin  floresamanda@example.net   \n",
      "3      1015  2025-04-05          592    Renee Floyd        dale98@example.org   \n",
      "4      1005  2025-03-22          516  Destiny Brown  brownheather@example.com   \n",
      "\n",
      "  Customer_Membership_Tier  Store_ID Store_Location   Store_Type  \\\n",
      "0                    Basic       202     Dallas, TX      Regular   \n",
      "1                 Business       210    Phoenix, AZ  Fuel Center   \n",
      "2                     Plus       208    Chicago, IL  Fuel Center   \n",
      "3                 Business       206    Atlanta, GA  Fuel Center   \n",
      "4                     Plus       210     Dallas, TX  Fuel Center   \n",
      "\n",
      "  POS_Terminal_ID  ...         Brand  Unit_Price Quantity_Purchased  \\\n",
      "0          POS008  ...  Sam’s Choice       10.99                  3   \n",
      "1          POS005  ...          Tide       15.99                  1   \n",
      "2          POS004  ...          Tide       15.99                  4   \n",
      "3          POS006  ...         Hanes       12.99                  5   \n",
      "4          POS001  ...  Sam’s Choice       10.99                  1   \n",
      "\n",
      "  Total_Sale_Amount Discount_Applied         Payment_Method  \\\n",
      "0             27.31             5.66  Sam’s Club Mastercard   \n",
      "1             13.06             2.93              Gift Card   \n",
      "2             51.99            11.97            Credit Card   \n",
      "3             63.14             1.81            Credit Card   \n",
      "4              8.80             2.19            Credit Card   \n",
      "\n",
      "   Inventory_Stock_At_Sale  Order_Status  Delivery_Method Delivery_Status  \n",
      "0                       99      Returned  Curbside Pickup  Not Applicable  \n",
      "1                      134      Returned  Curbside Pickup  Not Applicable  \n",
      "2                       58     Completed  In-store Pickup       Delivered  \n",
      "3                      108     Cancelled  Curbside Pickup  Not Applicable  \n",
      "4                       73     Cancelled    Home Delivery  Not Applicable  \n",
      "\n",
      "[5 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "fake = Faker()\n",
    "\n",
    "# Predefined sample values\n",
    "store_locations = [\"Dallas, TX\", \"Atlanta, GA\", \"Phoenix, AZ\", \"Chicago, IL\"]\n",
    "store_types = [\"Regular\", \"Business\", \"Fuel Center\"]\n",
    "membership_tiers = [\"Basic\", \"Plus\", \"Business\"]\n",
    "product_catalog = [\n",
    "    {\"Product_ID\": 301, \"Product_Name\": \"Samsung TV\", \"Category\": \"Electronics\", \"Brand\": \"Samsung\", \"Price\": 499.99},\n",
    "    {\"Product_ID\": 302, \"Product_Name\": \"Organic Apples\", \"Category\": \"Grocery\", \"Brand\": \"Nature's Best\", \"Price\": 4.99},\n",
    "    {\"Product_ID\": 303, \"Product_Name\": \"Men’s T-Shirt\", \"Category\": \"Apparel\", \"Brand\": \"Hanes\", \"Price\": 12.99},\n",
    "    {\"Product_ID\": 304, \"Product_Name\": \"Bluetooth Speaker\", \"Category\": \"Electronics\", \"Brand\": \"JBL\", \"Price\": 79.99},\n",
    "    {\"Product_ID\": 305, \"Product_Name\": \"Laundry Detergent\", \"Category\": \"Home Care\", \"Brand\": \"Tide\", \"Price\": 15.99},\n",
    "    {\"Product_ID\": 306, \"Product_Name\": \"LED Light Bulbs\", \"Category\": \"Home Improvement\", \"Brand\": \"Philips\", \"Price\": 8.49},\n",
    "    {\"Product_ID\": 307, \"Product_Name\": \"Chicken Breasts\", \"Category\": \"Grocery\", \"Brand\": \"Sam’s Choice\", \"Price\": 10.99}\n",
    "]\n",
    "payment_methods = [\"Credit Card\", \"Cash\", \"Gift Card\", \"Sam’s Club Mastercard\"]\n",
    "delivery_methods = [\"Home Delivery\", \"In-store Pickup\", \"Curbside Pickup\"]\n",
    "order_statuses = [\"Completed\", \"Cancelled\", \"Returned\"]\n",
    "delivery_statuses = [\"Delivered\", \"Pending\", \"Not Applicable\"]\n",
    "\n",
    "# Generate 100 unique orders, each with 1-5 products\n",
    "num_orders = 100\n",
    "order_ids = [1000 + i for i in range(num_orders)]\n",
    "records = []\n",
    "\n",
    "for order_id in order_ids:\n",
    "    num_items = random.randint(1, 5)\n",
    "    customer_id = random.randint(500, 600)\n",
    "    customer_name = fake.name()\n",
    "    customer_email = fake.email()\n",
    "    membership = random.choice(membership_tiers)\n",
    "    store_id = random.randint(200, 210)\n",
    "    store_loc = random.choice(store_locations)\n",
    "    store_type = random.choice(store_types)\n",
    "    pos_terminal = f\"POS{random.randint(1, 10):03d}\"\n",
    "    cashier_id = random.randint(1000, 1010)\n",
    "    order_date = fake.date_between(start_date='-30d', end_date='today')\n",
    "    payment_method = random.choice(payment_methods)\n",
    "    delivery_method = random.choice(delivery_methods)\n",
    "    order_status = random.choice(order_statuses)\n",
    "    delivery_status = \"Delivered\" if order_status == \"Completed\" else \"Not Applicable\"\n",
    "    \n",
    "    for _ in range(num_items):\n",
    "        product = random.choice(product_catalog)\n",
    "        quantity = random.randint(1, 5)\n",
    "        discount = round(random.uniform(0, 0.2) * product[\"Price\"] * quantity, 2)\n",
    "        total_price = round(product[\"Price\"] * quantity - discount, 2)\n",
    "        inventory_stock = random.randint(10, 200)\n",
    "\n",
    "        records.append({\n",
    "            \"Order_ID\": order_id,\n",
    "            \"Order_Date\": order_date,\n",
    "            \"Customer_ID\": customer_id,\n",
    "            \"Customer_Name\": customer_name,\n",
    "            \"Customer_Email\": customer_email,\n",
    "            \"Customer_Membership_Tier\": membership,\n",
    "            \"Store_ID\": store_id,\n",
    "            \"Store_Location\": store_loc,\n",
    "            \"Store_Type\": store_type,\n",
    "            \"POS_Terminal_ID\": pos_terminal,\n",
    "            \"Cashier_ID\": cashier_id,\n",
    "            \"Product_ID\": product[\"Product_ID\"],\n",
    "            \"Product_Name\": product[\"Product_Name\"],\n",
    "            \"Product_Category\": product[\"Category\"],\n",
    "            \"Brand\": product[\"Brand\"],\n",
    "            \"Unit_Price\": product[\"Price\"],\n",
    "            \"Quantity_Purchased\": quantity,\n",
    "            \"Total_Sale_Amount\": total_price,\n",
    "            \"Discount_Applied\": discount,\n",
    "            \"Payment_Method\": payment_method,\n",
    "            \"Inventory_Stock_At_Sale\": inventory_stock,\n",
    "            \"Order_Status\": order_status,\n",
    "            \"Delivery_Method\": delivery_method,\n",
    "            \"Delivery_Status\": delivery_status\n",
    "        })\n",
    "\n",
    "# Convert to DataFrame and sample 100 rows\n",
    "df = pd.DataFrame(records).sample(n=100, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Preview\n",
    "print(df.head())\n",
    "\n",
    "# Optional: save to CSV\n",
    "# df.to_csv(\"sams_club_sales_sample.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a6d6fa85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 24 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Order_ID                  100 non-null    int64  \n",
      " 1   Order_Date                100 non-null    object \n",
      " 2   Customer_ID               100 non-null    int64  \n",
      " 3   Customer_Name             100 non-null    object \n",
      " 4   Customer_Email            100 non-null    object \n",
      " 5   Customer_Membership_Tier  100 non-null    object \n",
      " 6   Store_ID                  100 non-null    int64  \n",
      " 7   Store_Location            100 non-null    object \n",
      " 8   Store_Type                100 non-null    object \n",
      " 9   POS_Terminal_ID           100 non-null    object \n",
      " 10  Cashier_ID                100 non-null    int64  \n",
      " 11  Product_ID                100 non-null    int64  \n",
      " 12  Product_Name              100 non-null    object \n",
      " 13  Product_Category          100 non-null    object \n",
      " 14  Brand                     100 non-null    object \n",
      " 15  Unit_Price                100 non-null    float64\n",
      " 16  Quantity_Purchased        100 non-null    int64  \n",
      " 17  Total_Sale_Amount         100 non-null    float64\n",
      " 18  Discount_Applied          100 non-null    float64\n",
      " 19  Payment_Method            100 non-null    object \n",
      " 20  Inventory_Stock_At_Sale   100 non-null    int64  \n",
      " 21  Order_Status              100 non-null    object \n",
      " 22  Delivery_Method           100 non-null    object \n",
      " 23  Delivery_Status           100 non-null    object \n",
      "dtypes: float64(3), int64(7), object(14)\n",
      "memory usage: 18.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81d7885f",
   "metadata": {},
   "source": [
    "## Store in a SQL database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "89f90f09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Order_ID  Order_Date  Customer_ID  Customer_Name            Customer_Email  \\\n",
      "0      1094  2025-04-04          554  Robert Hebert   zvillarreal@example.net   \n",
      "1      1001  2025-03-23          537    Paul Thomas        yrubio@example.net   \n",
      "2      1014  2025-04-15          586   Megan Martin  floresamanda@example.net   \n",
      "3      1015  2025-04-05          592    Renee Floyd        dale98@example.org   \n",
      "4      1005  2025-03-22          516  Destiny Brown  brownheather@example.com   \n",
      "\n",
      "  Customer_Membership_Tier  Store_ID Store_Location   Store_Type  \\\n",
      "0                    Basic       202     Dallas, TX      Regular   \n",
      "1                 Business       210    Phoenix, AZ  Fuel Center   \n",
      "2                     Plus       208    Chicago, IL  Fuel Center   \n",
      "3                 Business       206    Atlanta, GA  Fuel Center   \n",
      "4                     Plus       210     Dallas, TX  Fuel Center   \n",
      "\n",
      "  POS_Terminal_ID  ...         Brand  Unit_Price Quantity_Purchased  \\\n",
      "0          POS008  ...  Sam’s Choice       10.99                  3   \n",
      "1          POS005  ...          Tide       15.99                  1   \n",
      "2          POS004  ...          Tide       15.99                  4   \n",
      "3          POS006  ...         Hanes       12.99                  5   \n",
      "4          POS001  ...  Sam’s Choice       10.99                  1   \n",
      "\n",
      "  Total_Sale_Amount Discount_Applied         Payment_Method  \\\n",
      "0             27.31             5.66  Sam’s Club Mastercard   \n",
      "1             13.06             2.93              Gift Card   \n",
      "2             51.99            11.97            Credit Card   \n",
      "3             63.14             1.81            Credit Card   \n",
      "4              8.80             2.19            Credit Card   \n",
      "\n",
      "   Inventory_Stock_At_Sale  Order_Status  Delivery_Method Delivery_Status  \n",
      "0                       99      Returned  Curbside Pickup  Not Applicable  \n",
      "1                      134      Returned  Curbside Pickup  Not Applicable  \n",
      "2                       58     Completed  In-store Pickup       Delivered  \n",
      "3                      108     Cancelled  Curbside Pickup  Not Applicable  \n",
      "4                       73     Cancelled    Home Delivery  Not Applicable  \n",
      "\n",
      "[5 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "# Connect to SQLite (creates a file named 'sams_club.db' if it doesn't exist)\n",
    "conn = sqlite3.connect(\"sams_club_sample.db\")\n",
    "\n",
    "# Store the DataFrame into SQL table named 'sales_data'\n",
    "df.to_sql(\"sales_data\", conn, if_exists=\"replace\", index=False)\n",
    "\n",
    "# Confirm the table was created and preview a few rows\n",
    "result = pd.read_sql_query(\"SELECT * FROM sales_data LIMIT 5;\", conn)\n",
    "print(result)\n",
    "\n",
    "# Close the connection\n",
    "# conn.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3c6baef",
   "metadata": {},
   "source": [
    "# LLM Model  initiate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbaade99",
   "metadata": {},
   "source": [
    "## Initiate the LLM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2a381e36",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set your Google API key\n",
    "os.environ[\"GOOGLE_API_KEY\"] = \"Secret key here\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "97a4f91a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content=\"I am a large language model, trained by Google.  I'm a computer program designed to process information and respond to a wide range of prompts and questions.  I don't have personal experiences, feelings, or a physical body.  My purpose is to provide helpful and informative responses based on the vast amount of text data I've been trained on.\", additional_kwargs={}, response_metadata={'prompt_feedback': {'block_reason': 0, 'safety_ratings': []}, 'finish_reason': 'STOP', 'safety_ratings': []}, id='run-b848316a-8f63-4979-97cb-e94ad0b7037a-0', usage_metadata={'input_tokens': 3, 'output_tokens': 75, 'total_tokens': 78, 'input_token_details': {'cache_read': 0}})"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "llm = ChatGoogleGenerativeAI(\n",
    "    model=\"gemini-1.5-flash\",\n",
    "    temperature=0.0\n",
    ")\n",
    "llm.invoke(\"Who are you\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "183b39ca",
   "metadata": {},
   "source": [
    "# Prompt engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6394f8f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "db = SQLDatabase.from_uri(\"sqlite:///sams_club_sample.db\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "842a521e",
   "metadata": {},
   "outputs": [],
   "source": [
    "db_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True, return_sql=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e6ead93",
   "metadata": {},
   "source": [
    "## Run some sample queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e165892",
   "metadata": {},
   "source": [
    "### Query 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e047a7f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new SQLDatabaseChain chain...\u001b[0m\n",
      "\n",
      "which store had the most sales, return the store location and the total sales. \n",
      "Return the location only\n",
      "Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "\n",
      "SQLQuery:\n",
      "\u001b[1m> Finished chain.\u001b[0m\n",
      "SQLQuery: SELECT \"Store_Location\" FROM sales_data GROUP BY \"Store_Location\" ORDER BY SUM(\"Total_Sale_Amount\") DESC LIMIT 1\n"
     ]
    }
   ],
   "source": [
    "query_1 = \"\"\"\n",
    "which store had the most sales, return the store location and the total sales. \n",
    "Return the location only\n",
    "Generate only the SQL query and do not wrap the query in '''sqlite\n",
    "\"\"\"\n",
    "response_1 = db_chain.run(query_1)\n",
    "print(response_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db9bc23b",
   "metadata": {},
   "source": [
    "### Query 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a559a2d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new SQLDatabaseChain chain...\u001b[0m\n",
      "Return the daily sales across different location. Dont limit the result, provide all records. Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "SQLQuery:\n",
      "\u001b[1m> Finished chain.\u001b[0m\n",
      "SQLQuery: SELECT \"Order_Date\", \"Store_Location\", SUM(\"Total_Sale_Amount\") AS \"DailySales\" FROM sales_data GROUP BY \"Order_Date\", \"Store_Location\"\n"
     ]
    }
   ],
   "source": [
    "query_2 = \"Return the daily sales across different location. Dont limit the result, provide all records. Generate only the SQL query and do not wrap the query in '''sqlite\"\n",
    "response_2 = db_chain.run(query_2)\n",
    "print(response_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc4c9acb",
   "metadata": {},
   "source": [
    "### Query 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "278aa96d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new SQLDatabaseChain chain...\u001b[0m\n",
      "Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "Dont limit the records to 5, return all records\n",
      "Return the total quantity sold across each product on each day. \n",
      "\n",
      "SQLQuery:\n",
      "\u001b[1m> Finished chain.\u001b[0m\n",
      "SQLQuery: SELECT \"Order_Date\", \"Product_Name\", SUM(\"Quantity_Purchased\") AS \"Total_Quantity_Sold\" FROM sales_data GROUP BY \"Order_Date\", \"Product_Name\"\n"
     ]
    }
   ],
   "source": [
    "query_3 = \"\"\"Generate only the SQL query and do not wrap the query in '''sqlite\n",
    "Dont limit the records to 5, return all records\n",
    "Return the total quantity sold across each product on each day. \n",
    "\"\"\"\n",
    "response_3 = db_chain.run(query_3)\n",
    "print(response_3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f9c3dd0",
   "metadata": {},
   "source": [
    "## Few shot learning for complex queries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "95ca7068",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new SQLDatabaseChain chain...\u001b[0m\n",
      " While Generating the SQL query, do not wrap the query in '''sqlite.\n",
      "Describe all the columns in the sales_data table in the following format, column name: description.\n",
      "The final output should be the columns along with their descriptions\n",
      "SQLQuery:\u001b[32;1m\u001b[1;3mSQLQuery: SELECT '\"Order_ID\"',\"Order_ID\":'Order ID', '\"Order_Date\"',\"Order_Date\":'Order Date', '\"Customer_ID\"',\"Customer_ID\":'Customer ID', '\"Customer_Name\"',\"Customer_Name\":'Customer Name', '\"Customer_Email\"',\"Customer_Email\":'Customer Email', '\"Customer_Membership_Tier\"',\"Customer_Membership_Tier\":'Customer Membership Tier', '\"Store_ID\"',\"Store_ID\":'Store ID', '\"Store_Location\"',\"Store_Location\":'Store Location', '\"Store_Type\"',\"Store_Type\":'Store Type', '\"POS_Terminal_ID\"',\"POS_Terminal_ID\":'POS Terminal ID', '\"Cashier_ID\"',\"Cashier_ID\":'Cashier ID', '\"Product_ID\"',\"Product_ID\":'Product ID', '\"Product_Name\"',\"Product_Name\":'Product Name', '\"Product_Category\"',\"Product_Category\":'Product Category', '\"Brand\"',\"Brand\":'Brand', '\"Unit_Price\"',\"Unit_Price\":'Unit Price', '\"Quantity_Purchased\"',\"Quantity_Purchased\":'Quantity Purchased', '\"Total_Sale_Amount\"',\"Total_Sale_Amount\":'Total Sale Amount', '\"Discount_Applied\"',\"Discount_Applied\":'Discount Applied', '\"Payment_Method\"',\"Payment_Method\":'Payment Method', '\"Inventory_Stock_At_Sale\"',\"Inventory_Stock_At_Sale\":'Inventory Stock At Sale', '\"Order_Status\"',\"Order_Status\":'Order Status', '\"Delivery_Method\"',\"Delivery_Method\":'Delivery Method', '\"Delivery_Status\"',\"Delivery_Status\":'Delivery Status' FROM sales_data LIMIT 1\u001b[0m"
     ]
    },
    {
     "ename": "OperationalError",
     "evalue": "(sqlite3.OperationalError) unrecognized token: \":\"\n[SQL: SELECT '\"Order_ID\"',\"Order_ID\":'Order ID', '\"Order_Date\"',\"Order_Date\":'Order Date', '\"Customer_ID\"',\"Customer_ID\":'Customer ID', '\"Customer_Name\"',\"Customer_Name\":'Customer Name', '\"Customer_Email\"',\"Customer_Email\":'Customer Email', '\"Customer_Membership_Tier\"',\"Customer_Membership_Tier\":'Customer Membership Tier', '\"Store_ID\"',\"Store_ID\":'Store ID', '\"Store_Location\"',\"Store_Location\":'Store Location', '\"Store_Type\"',\"Store_Type\":'Store Type', '\"POS_Terminal_ID\"',\"POS_Terminal_ID\":'POS Terminal ID', '\"Cashier_ID\"',\"Cashier_ID\":'Cashier ID', '\"Product_ID\"',\"Product_ID\":'Product ID', '\"Product_Name\"',\"Product_Name\":'Product Name', '\"Product_Category\"',\"Product_Category\":'Product Category', '\"Brand\"',\"Brand\":'Brand', '\"Unit_Price\"',\"Unit_Price\":'Unit Price', '\"Quantity_Purchased\"',\"Quantity_Purchased\":'Quantity Purchased', '\"Total_Sale_Amount\"',\"Total_Sale_Amount\":'Total Sale Amount', '\"Discount_Applied\"',\"Discount_Applied\":'Discount Applied', '\"Payment_Method\"',\"Payment_Method\":'Payment Method', '\"Inventory_Stock_At_Sale\"',\"Inventory_Stock_At_Sale\":'Inventory Stock At Sale', '\"Order_Status\"',\"Order_Status\":'Order Status', '\"Delivery_Method\"',\"Delivery_Method\":'Delivery Method', '\"Delivery_Status\"',\"Delivery_Status\":'Delivery Status' FROM sales_data LIMIT 1]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mOperationalError\u001b[0m                          Traceback (most recent call last)",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1964\u001b[0m, in \u001b[0;36mConnection._exec_single_context\u001b[1;34m(self, dialect, context, statement, parameters)\u001b[0m\n\u001b[0;32m   1963\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m evt_handled:\n\u001b[1;32m-> 1964\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdialect\u001b[38;5;241m.\u001b[39mdo_execute(\n\u001b[0;32m   1965\u001b[0m             cursor, str_statement, effective_parameters, context\n\u001b[0;32m   1966\u001b[0m         )\n\u001b[0;32m   1968\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_has_events \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mengine\u001b[38;5;241m.\u001b[39m_has_events:\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:945\u001b[0m, in \u001b[0;36mDefaultDialect.do_execute\u001b[1;34m(self, cursor, statement, parameters, context)\u001b[0m\n\u001b[0;32m    944\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdo_execute\u001b[39m(\u001b[38;5;28mself\u001b[39m, cursor, statement, parameters, context\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m--> 945\u001b[0m     cursor\u001b[38;5;241m.\u001b[39mexecute(statement, parameters)\n",
      "\u001b[1;31mOperationalError\u001b[0m: unrecognized token: \":\"",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mOperationalError\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[58], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Get the description of all columns and store in 'col_desc'\u001b[39;00m\n\u001b[0;32m      3\u001b[0m description_chain \u001b[38;5;241m=\u001b[39m SQLDatabaseChain\u001b[38;5;241m.\u001b[39mfrom_llm(llm, db, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m----> 4\u001b[0m col_desc \u001b[38;5;241m=\u001b[39m description_chain\u001b[38;5;241m.\u001b[39mrun(\u001b[38;5;124m\"\"\"\u001b[39m\u001b[38;5;124m While Generating the SQL query, do not wrap the query in \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msqlite.\u001b[39m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;124mDescribe all the columns in the sales_data table in the following format, column name: description.\u001b[39m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;124mThe final output should be the columns along with their descriptions\u001b[39m\u001b[38;5;124m\"\"\"\u001b[39m)\n\u001b[0;32m      8\u001b[0m col_desc \u001b[38;5;241m=\u001b[39m col_desc[\u001b[38;5;241m8\u001b[39m:]\n\u001b[0;32m      9\u001b[0m \u001b[38;5;28mprint\u001b[39m(col_desc)\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain_core\\_api\\deprecation.py:188\u001b[0m, in \u001b[0;36mdeprecated.<locals>.deprecate.<locals>.warning_emitting_wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    186\u001b[0m     warned \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    187\u001b[0m     emit_warning()\n\u001b[1;32m--> 188\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m wrapped(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain\\chains\\base.py:606\u001b[0m, in \u001b[0;36mChain.run\u001b[1;34m(self, callbacks, tags, metadata, *args, **kwargs)\u001b[0m\n\u001b[0;32m    604\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    605\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m`run` supports only one positional argument.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 606\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m(args[\u001b[38;5;241m0\u001b[39m], callbacks\u001b[38;5;241m=\u001b[39mcallbacks, tags\u001b[38;5;241m=\u001b[39mtags, metadata\u001b[38;5;241m=\u001b[39mmetadata)[\n\u001b[0;32m    607\u001b[0m         _output_key\n\u001b[0;32m    608\u001b[0m     ]\n\u001b[0;32m    610\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m kwargs \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m args:\n\u001b[0;32m    611\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m(kwargs, callbacks\u001b[38;5;241m=\u001b[39mcallbacks, tags\u001b[38;5;241m=\u001b[39mtags, metadata\u001b[38;5;241m=\u001b[39mmetadata)[\n\u001b[0;32m    612\u001b[0m         _output_key\n\u001b[0;32m    613\u001b[0m     ]\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain_core\\_api\\deprecation.py:188\u001b[0m, in \u001b[0;36mdeprecated.<locals>.deprecate.<locals>.warning_emitting_wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    186\u001b[0m     warned \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    187\u001b[0m     emit_warning()\n\u001b[1;32m--> 188\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m wrapped(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain\\chains\\base.py:389\u001b[0m, in \u001b[0;36mChain.__call__\u001b[1;34m(self, inputs, return_only_outputs, callbacks, tags, metadata, run_name, include_run_info)\u001b[0m\n\u001b[0;32m    357\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Execute the chain.\u001b[39;00m\n\u001b[0;32m    358\u001b[0m \n\u001b[0;32m    359\u001b[0m \u001b[38;5;124;03mArgs:\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    380\u001b[0m \u001b[38;5;124;03m        `Chain.output_keys`.\u001b[39;00m\n\u001b[0;32m    381\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    382\u001b[0m config \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m    383\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcallbacks\u001b[39m\u001b[38;5;124m\"\u001b[39m: callbacks,\n\u001b[0;32m    384\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtags\u001b[39m\u001b[38;5;124m\"\u001b[39m: tags,\n\u001b[0;32m    385\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m: metadata,\n\u001b[0;32m    386\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrun_name\u001b[39m\u001b[38;5;124m\"\u001b[39m: run_name,\n\u001b[0;32m    387\u001b[0m }\n\u001b[1;32m--> 389\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39minvoke(\n\u001b[0;32m    390\u001b[0m     inputs,\n\u001b[0;32m    391\u001b[0m     cast(RunnableConfig, {k: v \u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m config\u001b[38;5;241m.\u001b[39mitems() \u001b[38;5;28;01mif\u001b[39;00m v \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m}),\n\u001b[0;32m    392\u001b[0m     return_only_outputs\u001b[38;5;241m=\u001b[39mreturn_only_outputs,\n\u001b[0;32m    393\u001b[0m     include_run_info\u001b[38;5;241m=\u001b[39minclude_run_info,\n\u001b[0;32m    394\u001b[0m )\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain\\chains\\base.py:170\u001b[0m, in \u001b[0;36mChain.invoke\u001b[1;34m(self, input, config, **kwargs)\u001b[0m\n\u001b[0;32m    168\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    169\u001b[0m     run_manager\u001b[38;5;241m.\u001b[39mon_chain_error(e)\n\u001b[1;32m--> 170\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\n\u001b[0;32m    171\u001b[0m run_manager\u001b[38;5;241m.\u001b[39mon_chain_end(outputs)\n\u001b[0;32m    173\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m include_run_info:\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain\\chains\\base.py:160\u001b[0m, in \u001b[0;36mChain.invoke\u001b[1;34m(self, input, config, **kwargs)\u001b[0m\n\u001b[0;32m    157\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    158\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_inputs(inputs)\n\u001b[0;32m    159\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m--> 160\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call(inputs, run_manager\u001b[38;5;241m=\u001b[39mrun_manager)\n\u001b[0;32m    161\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m new_arg_supported\n\u001b[0;32m    162\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call(inputs)\n\u001b[0;32m    163\u001b[0m     )\n\u001b[0;32m    165\u001b[0m     final_outputs: Dict[\u001b[38;5;28mstr\u001b[39m, Any] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprep_outputs(\n\u001b[0;32m    166\u001b[0m         inputs, outputs, return_only_outputs\n\u001b[0;32m    167\u001b[0m     )\n\u001b[0;32m    168\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain_experimental\\sql\\base.py:204\u001b[0m, in \u001b[0;36mSQLDatabaseChain._call\u001b[1;34m(self, inputs, run_manager)\u001b[0m\n\u001b[0;32m    200\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m exc:\n\u001b[0;32m    201\u001b[0m     \u001b[38;5;66;03m# Append intermediate steps to exception, to aid in logging and later\u001b[39;00m\n\u001b[0;32m    202\u001b[0m     \u001b[38;5;66;03m# improvement of few shot prompt seeds\u001b[39;00m\n\u001b[0;32m    203\u001b[0m     exc\u001b[38;5;241m.\u001b[39mintermediate_steps \u001b[38;5;241m=\u001b[39m intermediate_steps  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[1;32m--> 204\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exc\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain_experimental\\sql\\base.py:149\u001b[0m, in \u001b[0;36mSQLDatabaseChain._call\u001b[1;34m(self, inputs, run_manager)\u001b[0m\n\u001b[0;32m    147\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m SQL_RESULT \u001b[38;5;129;01min\u001b[39;00m sql_cmd:\n\u001b[0;32m    148\u001b[0m         sql_cmd \u001b[38;5;241m=\u001b[39m sql_cmd\u001b[38;5;241m.\u001b[39msplit(SQL_RESULT)[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mstrip()\n\u001b[1;32m--> 149\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdatabase\u001b[38;5;241m.\u001b[39mrun(sql_cmd)\n\u001b[0;32m    150\u001b[0m     intermediate_steps\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;28mstr\u001b[39m(result))  \u001b[38;5;66;03m# output: sql exec\u001b[39;00m\n\u001b[0;32m    151\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain_community\\utilities\\sql_database.py:526\u001b[0m, in \u001b[0;36mSQLDatabase.run\u001b[1;34m(self, command, fetch, include_columns, parameters, execution_options)\u001b[0m\n\u001b[0;32m    512\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrun\u001b[39m(\n\u001b[0;32m    513\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m    514\u001b[0m     command: Union[\u001b[38;5;28mstr\u001b[39m, Executable],\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    519\u001b[0m     execution_options: Optional[Dict[\u001b[38;5;28mstr\u001b[39m, Any]] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    520\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Union[\u001b[38;5;28mstr\u001b[39m, Sequence[Dict[\u001b[38;5;28mstr\u001b[39m, Any]], Result[Any]]:\n\u001b[0;32m    521\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Execute a SQL command and return a string representing the results.\u001b[39;00m\n\u001b[0;32m    522\u001b[0m \n\u001b[0;32m    523\u001b[0m \u001b[38;5;124;03m    If the statement returns rows, a string of the results is returned.\u001b[39;00m\n\u001b[0;32m    524\u001b[0m \u001b[38;5;124;03m    If the statement returns no rows, an empty string is returned.\u001b[39;00m\n\u001b[0;32m    525\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 526\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_execute(\n\u001b[0;32m    527\u001b[0m         command, fetch, parameters\u001b[38;5;241m=\u001b[39mparameters, execution_options\u001b[38;5;241m=\u001b[39mexecution_options\n\u001b[0;32m    528\u001b[0m     )\n\u001b[0;32m    530\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m fetch \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcursor\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m    531\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\langchain_community\\utilities\\sql_database.py:491\u001b[0m, in \u001b[0;36mSQLDatabase._execute\u001b[1;34m(self, command, fetch, parameters, execution_options)\u001b[0m\n\u001b[0;32m    489\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    490\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mQuery expression has unknown type: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(command)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 491\u001b[0m cursor \u001b[38;5;241m=\u001b[39m connection\u001b[38;5;241m.\u001b[39mexecute(\n\u001b[0;32m    492\u001b[0m     command,\n\u001b[0;32m    493\u001b[0m     parameters,\n\u001b[0;32m    494\u001b[0m     execution_options\u001b[38;5;241m=\u001b[39mexecution_options,\n\u001b[0;32m    495\u001b[0m )\n\u001b[0;32m    497\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cursor\u001b[38;5;241m.\u001b[39mreturns_rows:\n\u001b[0;32m    498\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m fetch \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416\u001b[0m, in \u001b[0;36mConnection.execute\u001b[1;34m(self, statement, parameters, execution_options)\u001b[0m\n\u001b[0;32m   1414\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exc\u001b[38;5;241m.\u001b[39mObjectNotExecutableError(statement) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   1415\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1416\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m meth(\n\u001b[0;32m   1417\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   1418\u001b[0m         distilled_parameters,\n\u001b[0;32m   1419\u001b[0m         execution_options \u001b[38;5;129;01mor\u001b[39;00m NO_OPTIONS,\n\u001b[0;32m   1420\u001b[0m     )\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:523\u001b[0m, in \u001b[0;36mClauseElement._execute_on_connection\u001b[1;34m(self, connection, distilled_params, execution_options)\u001b[0m\n\u001b[0;32m    521\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m TYPE_CHECKING:\n\u001b[0;32m    522\u001b[0m         \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m, Executable)\n\u001b[1;32m--> 523\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m connection\u001b[38;5;241m.\u001b[39m_execute_clauseelement(\n\u001b[0;32m    524\u001b[0m         \u001b[38;5;28mself\u001b[39m, distilled_params, execution_options\n\u001b[0;32m    525\u001b[0m     )\n\u001b[0;32m    526\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    527\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exc\u001b[38;5;241m.\u001b[39mObjectNotExecutableError(\u001b[38;5;28mself\u001b[39m)\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1638\u001b[0m, in \u001b[0;36mConnection._execute_clauseelement\u001b[1;34m(self, elem, distilled_parameters, execution_options)\u001b[0m\n\u001b[0;32m   1626\u001b[0m compiled_cache: Optional[CompiledCacheType] \u001b[38;5;241m=\u001b[39m execution_options\u001b[38;5;241m.\u001b[39mget(\n\u001b[0;32m   1627\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcompiled_cache\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mengine\u001b[38;5;241m.\u001b[39m_compiled_cache\n\u001b[0;32m   1628\u001b[0m )\n\u001b[0;32m   1630\u001b[0m compiled_sql, extracted_params, cache_hit \u001b[38;5;241m=\u001b[39m elem\u001b[38;5;241m.\u001b[39m_compile_w_cache(\n\u001b[0;32m   1631\u001b[0m     dialect\u001b[38;5;241m=\u001b[39mdialect,\n\u001b[0;32m   1632\u001b[0m     compiled_cache\u001b[38;5;241m=\u001b[39mcompiled_cache,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1636\u001b[0m     linting\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdialect\u001b[38;5;241m.\u001b[39mcompiler_linting \u001b[38;5;241m|\u001b[39m compiler\u001b[38;5;241m.\u001b[39mWARN_LINTING,\n\u001b[0;32m   1637\u001b[0m )\n\u001b[1;32m-> 1638\u001b[0m ret \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_execute_context(\n\u001b[0;32m   1639\u001b[0m     dialect,\n\u001b[0;32m   1640\u001b[0m     dialect\u001b[38;5;241m.\u001b[39mexecution_ctx_cls\u001b[38;5;241m.\u001b[39m_init_compiled,\n\u001b[0;32m   1641\u001b[0m     compiled_sql,\n\u001b[0;32m   1642\u001b[0m     distilled_parameters,\n\u001b[0;32m   1643\u001b[0m     execution_options,\n\u001b[0;32m   1644\u001b[0m     compiled_sql,\n\u001b[0;32m   1645\u001b[0m     distilled_parameters,\n\u001b[0;32m   1646\u001b[0m     elem,\n\u001b[0;32m   1647\u001b[0m     extracted_params,\n\u001b[0;32m   1648\u001b[0m     cache_hit\u001b[38;5;241m=\u001b[39mcache_hit,\n\u001b[0;32m   1649\u001b[0m )\n\u001b[0;32m   1650\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_events:\n\u001b[0;32m   1651\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch\u001b[38;5;241m.\u001b[39mafter_execute(\n\u001b[0;32m   1652\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   1653\u001b[0m         elem,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1657\u001b[0m         ret,\n\u001b[0;32m   1658\u001b[0m     )\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1843\u001b[0m, in \u001b[0;36mConnection._execute_context\u001b[1;34m(self, dialect, constructor, statement, parameters, execution_options, *args, **kw)\u001b[0m\n\u001b[0;32m   1841\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exec_insertmany_context(dialect, context)\n\u001b[0;32m   1842\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1843\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exec_single_context(\n\u001b[0;32m   1844\u001b[0m         dialect, context, statement, parameters\n\u001b[0;32m   1845\u001b[0m     )\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1983\u001b[0m, in \u001b[0;36mConnection._exec_single_context\u001b[1;34m(self, dialect, context, statement, parameters)\u001b[0m\n\u001b[0;32m   1980\u001b[0m     result \u001b[38;5;241m=\u001b[39m context\u001b[38;5;241m.\u001b[39m_setup_result_proxy()\n\u001b[0;32m   1982\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m-> 1983\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle_dbapi_exception(\n\u001b[0;32m   1984\u001b[0m         e, str_statement, effective_parameters, cursor, context\n\u001b[0;32m   1985\u001b[0m     )\n\u001b[0;32m   1987\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2352\u001b[0m, in \u001b[0;36mConnection._handle_dbapi_exception\u001b[1;34m(self, e, statement, parameters, cursor, context, is_sub_exec)\u001b[0m\n\u001b[0;32m   2350\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m should_wrap:\n\u001b[0;32m   2351\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m sqlalchemy_exception \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 2352\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m sqlalchemy_exception\u001b[38;5;241m.\u001b[39mwith_traceback(exc_info[\u001b[38;5;241m2\u001b[39m]) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n\u001b[0;32m   2353\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   2354\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m exc_info[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1964\u001b[0m, in \u001b[0;36mConnection._exec_single_context\u001b[1;34m(self, dialect, context, statement, parameters)\u001b[0m\n\u001b[0;32m   1962\u001b[0m                 \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1963\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m evt_handled:\n\u001b[1;32m-> 1964\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdialect\u001b[38;5;241m.\u001b[39mdo_execute(\n\u001b[0;32m   1965\u001b[0m             cursor, str_statement, effective_parameters, context\n\u001b[0;32m   1966\u001b[0m         )\n\u001b[0;32m   1968\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_has_events \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mengine\u001b[38;5;241m.\u001b[39m_has_events:\n\u001b[0;32m   1969\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch\u001b[38;5;241m.\u001b[39mafter_cursor_execute(\n\u001b[0;32m   1970\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   1971\u001b[0m         cursor,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1975\u001b[0m         context\u001b[38;5;241m.\u001b[39mexecutemany,\n\u001b[0;32m   1976\u001b[0m     )\n",
      "File \u001b[1;32mc:\\Anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:945\u001b[0m, in \u001b[0;36mDefaultDialect.do_execute\u001b[1;34m(self, cursor, statement, parameters, context)\u001b[0m\n\u001b[0;32m    944\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdo_execute\u001b[39m(\u001b[38;5;28mself\u001b[39m, cursor, statement, parameters, context\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m--> 945\u001b[0m     cursor\u001b[38;5;241m.\u001b[39mexecute(statement, parameters)\n",
      "\u001b[1;31mOperationalError\u001b[0m: (sqlite3.OperationalError) unrecognized token: \":\"\n[SQL: SELECT '\"Order_ID\"',\"Order_ID\":'Order ID', '\"Order_Date\"',\"Order_Date\":'Order Date', '\"Customer_ID\"',\"Customer_ID\":'Customer ID', '\"Customer_Name\"',\"Customer_Name\":'Customer Name', '\"Customer_Email\"',\"Customer_Email\":'Customer Email', '\"Customer_Membership_Tier\"',\"Customer_Membership_Tier\":'Customer Membership Tier', '\"Store_ID\"',\"Store_ID\":'Store ID', '\"Store_Location\"',\"Store_Location\":'Store Location', '\"Store_Type\"',\"Store_Type\":'Store Type', '\"POS_Terminal_ID\"',\"POS_Terminal_ID\":'POS Terminal ID', '\"Cashier_ID\"',\"Cashier_ID\":'Cashier ID', '\"Product_ID\"',\"Product_ID\":'Product ID', '\"Product_Name\"',\"Product_Name\":'Product Name', '\"Product_Category\"',\"Product_Category\":'Product Category', '\"Brand\"',\"Brand\":'Brand', '\"Unit_Price\"',\"Unit_Price\":'Unit Price', '\"Quantity_Purchased\"',\"Quantity_Purchased\":'Quantity Purchased', '\"Total_Sale_Amount\"',\"Total_Sale_Amount\":'Total Sale Amount', '\"Discount_Applied\"',\"Discount_Applied\":'Discount Applied', '\"Payment_Method\"',\"Payment_Method\":'Payment Method', '\"Inventory_Stock_At_Sale\"',\"Inventory_Stock_At_Sale\":'Inventory Stock At Sale', '\"Order_Status\"',\"Order_Status\":'Order Status', '\"Delivery_Method\"',\"Delivery_Method\":'Delivery Method', '\"Delivery_Status\"',\"Delivery_Status\":'Delivery Status' FROM sales_data LIMIT 1]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"
     ]
    }
   ],
   "source": [
    "# Get the description of all columns and store in 'col_desc'\n",
    "\n",
    "description_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\n",
    "col_desc = description_chain.run(\"\"\" While Generating the SQL query, do not wrap the query in '''sqlite.\n",
    "Describe all the columns in the sales_data table in the following format, column name: description.\n",
    "The final output should be the columns along with their descriptions\"\"\")\n",
    "\n",
    "col_desc = col_desc[8:]\n",
    "print(col_desc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0bd2887",
   "metadata": {},
   "outputs": [],
   "source": [
    "few_shots = [\n",
    "    {\n",
    "        'Question':\"\"\"which store had the most sales, return the store location and the total sales. \n",
    "        Generate only the SQL query and do not wrap the query in '''sqlite\"\"\",\n",
    "        'SQLQuery':\"\"\"SELECT \"Store_Location\" FROM sales_data GROUP BY \"Store_Location\" ORDER BY SUM(\"Total_Sale_Amount\") DESC LIMIT 1\"\"\"\n",
    "        # 'SQLResult':\"Result of the SQL query\",\n",
    "        # 'Answer': response_1\n",
    "    },\n",
    "\n",
    "    {\n",
    "        'Question': \"Return the daily sales across different location. Generate only the SQL query and do not wrap the query in '''sqlite\",\n",
    "        'SQLQuery': \"\"\"SELECT \"Order_Date\", \"Store_Location\", SUM(\"Total_Sale_Amount\") AS \"DailySales\" FROM sales_data GROUP BY \"Order_Date\", \"Store_Location\"\n",
    "        \"\"\"\n",
    "        # 'SQLResult': \"Result of the SQL query\",\n",
    "        # 'Answer': response_2\n",
    "    },\n",
    "\n",
    "    {\n",
    "        'Question': \"\"\"Generate only the SQL query and do not wrap the query in '''sqlite\n",
    "        Dont limit the records to 5, return all records\n",
    "        Return the total quantity sold across each product on each day. \n",
    "        \"\"\",\n",
    "        'SQLQuery': \"\"\"SELECT \"Order_Date\", \"Product_Name\", SUM(\"Quantity_Purchased\") AS \"Total_Quantity_Sold\" FROM sales_data GROUP BY \"Order_Date\", \"Product_Name\"\n",
    "        \"\"\"\n",
    "        # 'SQLResult': \"Result of the SQL query\",\n",
    "        # 'Answer': response_3\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdd8e2a1",
   "metadata": {},
   "source": [
    "### Create embedding for the few shots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63190f45",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Haseeb.khan\\AppData\\Local\\Temp\\ipykernel_17440\\2723708130.py:1: LangChainDeprecationWarning: The class `HuggingFaceEmbeddings` was deprecated in LangChain 0.2.2 and will be removed in 1.0. An updated version of the class exists in the :class:`~langchain-huggingface package and should be used instead. To use it run `pip install -U :class:`~langchain-huggingface` and import as `from :class:`~langchain_huggingface import HuggingFaceEmbeddings``.\n",
      "  embeddings = HuggingFaceEmbeddings(model_name = \"sentence-transformers/all-MiniLM-L6-v2\")\n"
     ]
    }
   ],
   "source": [
    "embeddings = HuggingFaceEmbeddings(model_name = \"sentence-transformers/all-MiniLM-L6-v2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8c8c547",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['which store had the most sales, return the store location and the total sales. \\n        Generate only the SQL query and do not wrap the query in \\'\\'\\'sqlite SELECT \"Store_Location\" FROM sales_data GROUP BY \"Store_Location\" ORDER BY SUM(\"Total_Sale_Amount\") DESC LIMIT 1',\n",
       " 'Return the daily sales across different location. Generate only the SQL query and do not wrap the query in \\'\\'\\'sqlite SELECT \"Order_Date\", \"Store_Location\", SUM(\"Total_Sale_Amount\") AS \"DailySales\" FROM sales_data GROUP BY \"Order_Date\", \"Store_Location\"\\n        ',\n",
       " 'Generate only the SQL query and do not wrap the query in \\'\\'\\'sqlite\\n        Dont limit the records to 5, return all records\\n        Return the total quantity sold across each product on each day. \\n         SELECT \"Order_Date\", \"Product_Name\", SUM(\"Quantity_Purchased\") AS \"Total_Quantity_Sold\" FROM sales_data GROUP BY \"Order_Date\", \"Product_Name\"\\n        ']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_vectorize = [\" \".join(shot.values()) for shot in few_shots]\n",
    "to_vectorize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f71a238f",
   "metadata": {},
   "outputs": [],
   "source": [
    "vector_store = FAISS.from_texts(to_vectorize, embedding=embeddings, metadatas=few_shots)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bb7bd86",
   "metadata": {},
   "source": [
    "### Try a sample query using few shot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a8c521c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'Question': \"which store had the most sales, return the store location and the total sales. \\n        Generate only the SQL query and do not wrap the query in '''sqlite\",\n",
       "  'SQLQuery': 'SELECT \"Store_Location\" FROM sales_data GROUP BY \"Store_Location\" ORDER BY SUM(\"Total_Sale_Amount\") DESC LIMIT 1'},\n",
       " {'Question': \"Return the daily sales across different location. Generate only the SQL query and do not wrap the query in '''sqlite\",\n",
       "  'SQLQuery': 'SELECT \"Order_Date\", \"Store_Location\", SUM(\"Total_Sale_Amount\") AS \"DailySales\" FROM sales_data GROUP BY \"Order_Date\", \"Store_Location\"\\n        '},\n",
       " {'Question': \"Generate only the SQL query and do not wrap the query in '''sqlite\\n        Dont limit the records to 5, return all records\\n        Return the total quantity sold across each product on each day. \\n        \",\n",
       "  'SQLQuery': 'SELECT \"Order_Date\", \"Product_Name\", SUM(\"Quantity_Purchased\") AS \"Total_Quantity_Sold\" FROM sales_data GROUP BY \"Order_Date\", \"Product_Name\"\\n        '}]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "example_selector = SemanticSimilarityExampleSelector(\n",
    "    vectorstore = vector_store,\n",
    "    k = 3\n",
    "    )\n",
    "\n",
    "example_selector.select_examples({\"Question\":\"\"\"which store had the least sales, Return the location only. Generate only the SQL query and do not wrap the query in '''sqlite\"\"\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c763758",
   "metadata": {},
   "source": [
    "## Create prompt templates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d472e528",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the prompt prefix and suffix\n",
    "\n",
    "prompt_prefix = \"\"\"You are a SQL expert working on the SQLite database. \n",
    "Generate only the SQL query and do not wrap the query in '''sqlite\n",
    "Avoid querying all the columns in the table. You must query only the columns required to generate the result\n",
    "Pay attention to the description of columns given below. Restrict the queries to these columns only\n",
    "Dont limit the number of records, generate the query to return all records(Provided below are examples)\"\"\"\n",
    "\n",
    "prompt_suffix = \"\"\"Generate only the SQL query and do not wrap the query in '''sqlite\n",
    "Use only the given table with the columns as described : \"\"\" + col_desc + \"\"\"\\nQuestion: {input}\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "8b868b9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "example_prompt = PromptTemplate(\n",
    "    input_variables=[\"Question\", \"SQLQuery\"],\n",
    "    template=\"\\nQuestion: {Question}\\nSQL Query: {SQLQuery}\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "665a2c6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "few_shot_prompt = FewShotPromptTemplate(\n",
    "    example_selector = example_selector,\n",
    "    example_prompt = example_prompt,\n",
    "    prefix= prompt_prefix,\n",
    "    suffix= prompt_suffix,\n",
    "    input_variables = ['input']\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1203d3c1",
   "metadata": {},
   "source": [
    "# Define all functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "aef30314",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to return dataframe based on natural language query\n",
    "\n",
    "def generate_df_from_query(user_query):\n",
    "\n",
    "    prompt_template_db_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True, prompt=few_shot_prompt)\n",
    "    response_sql_query = prompt_template_db_chain.run(\n",
    "        few_shot_prompt.format(\n",
    "            input = user_query)\n",
    "        )\n",
    "    \n",
    "    response_sql_query = response_sql_query[6:-3] if response_sql_query[0:6] == \"```sql\" and response_sql_query[-3:] == \"```\" else response_sql_query\n",
    "\n",
    "    df = pd.read_sql_query(response_sql_query, conn)\n",
    "    return df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "54176955",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fucntion to describe a dataframe\n",
    "\n",
    "def describe_df(df):\n",
    "    summary = f\"Shape: {df.shape}\\n\\n\"\n",
    "    summary += \"Column-wise Summary:\\n\"\n",
    "    for col in df.columns:\n",
    "        summary += f\"\\nColumn: {col}\\n\"\n",
    "        summary += f\"Type: {df[col].dtype}\\n\"\n",
    "        if df[col].dtype == 'object' or df[col].dtype.name == 'category':\n",
    "            summary += f\"Unique values: {df[col].nunique()}\\n\"\n",
    "        else:\n",
    "            summary += f\"Sample values: {df[col].unique()[:5]}\\n\"\n",
    "    return summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "88339445",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Function to auto-encode using LLM\n",
    "\n",
    "def auto_feature_engineering(df: pd.DataFrame, target_column=None):\n",
    "    # Add target column info if available\n",
    "    context = f\"The target column is: '{target_column}'.\" if target_column else \"No target column is specified.\"\n",
    "    \n",
    "    summary = describe_df(df)\n",
    "    \n",
    "    prompt = f\"\"\"\n",
    "You are a data scientist. Given the DataFrame summary below, write only the Python code to:\n",
    "1. Identify categorical columns.\n",
    "2. Decide the best encoding (one-hot, frequency, or target encoding) for each based on the most information gain\n",
    "3. Apply encoding and create a new DataFrame named 'encoded_df'\n",
    "\n",
    "{context}\n",
    "\n",
    "### Important:\n",
    "- Use pandas and sklearn if needed.\n",
    "- The original DataFrame is named 'df'.\n",
    "- Return on the final pandas dataframe named as 'encoded_df'\n",
    "- Do not generate a sample dataframe. Assume 'df' to be the dataframe variable\n",
    "- Idenitfy the categorical columns and accurately use the column names in the dataframe 'df'\n",
    "\n",
    "DataFrame Summary:\n",
    "{summary}\n",
    "\"\"\"\n",
    "\n",
    "    # Provide df into Python REPL environment\n",
    "    global_dict[\"df\"] = df.copy() # copied to avoid mutation\n",
    "\n",
    "    # Generate the python code\n",
    "    encoding_code = llm.invoke(prompt).content[9:-4]\n",
    "    \n",
    "    print(encoding_code)\n",
    "    \n",
    "    # Run the code\n",
    "    exec(encoding_code, globals(), local_dict)\n",
    "\n",
    "\n",
    "    # Collect df_encoded from memory\n",
    "    try:\n",
    "        df_encoded = local_dict['encoded_df']\n",
    "        if df_encoded is None:\n",
    "            print(\"-\"*50, \"\\ndf_encoded was not returned. You may need to debug the agent's code.\")\n",
    "        return df_encoded\n",
    "    except Exception as e:\n",
    "        print(\"Error getting encoded_df:\", e)\n",
    "        return None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1493df3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Final function\n",
    "\n",
    "def encoded_df_from_query(user_query):\n",
    "\n",
    "    return auto_feature_engineering(generate_df_from_query(user_query=user_query))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5759de99",
   "metadata": {},
   "source": [
    "# Call the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "e251a719",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new SQLDatabaseChain chain...\u001b[0m\n",
      "You are a SQL expert working on the SQLite database. \n",
      "Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "Avoid querying all the columns in the table. You must query only the columns required to generate the result\n",
      "Pay attention to the description of columns given below. Restrict the queries to these columns only\n",
      "Dont limit the number of records, generate the query to return all records(Provided below are examples)\n",
      "\n",
      "\n",
      "Question: which store had the most sales, return the store location and the total sales. \n",
      "        Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "SQL Query: SELECT \"Store_Location\" FROM sales_data GROUP BY \"Store_Location\" ORDER BY SUM(\"Total_Sale_Amount\") DESC LIMIT 1\n",
      "\n",
      "\n",
      "Question: Return the daily sales across different location. Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "SQL Query: SELECT \"Order_Date\", \"Store_Location\", SUM(\"Total_Sale_Amount\") AS \"DailySales\" FROM sales_data GROUP BY \"Order_Date\", \"Store_Location\"\n",
      "        \n",
      "\n",
      "\n",
      "Question: Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "        Dont limit the records to 5, return all records\n",
      "        Return the total quantity sold across each product on each day. \n",
      "        \n",
      "SQL Query: SELECT \"Order_Date\", \"Product_Name\", SUM(\"Quantity_Purchased\") AS \"Total_Quantity_Sold\" FROM sales_data GROUP BY \"Order_Date\", \"Product_Name\"\n",
      "        \n",
      "\n",
      "Generate only the SQL query and do not wrap the query in '''sqlite\n",
      "Use only the given table with the columns as described : rder_ID: Unique identifier for each order.\n",
      "Order_Date: Date when the order was placed.\n",
      "Customer_ID: Unique identifier for each customer.\n",
      "Customer_Name: Name of the customer.\n",
      "Customer_Email: Email address of the customer.\n",
      "Customer_Membership_Tier: Membership tier of the customer (e.g., Basic, Business).\n",
      "Store_ID: Unique identifier for each store.\n",
      "Store_Location: Location of the store.\n",
      "Store_Type: Type of the store (e.g., Regular, Business, Fuel Center).\n",
      "POS_Terminal_ID: Identifier for the point-of-sale terminal used for the transaction.\n",
      "Cashier_ID: Unique identifier for the cashier who processed the order.\n",
      "Product_ID: Unique identifier for each product.\n",
      "Product_Name: Name of the product.\n",
      "Product_Category: Category of the product (e.g., Electronics, Grocery).\n",
      "Brand: Brand of the product.\n",
      "Unit_Price: Price of a single unit of the product.\n",
      "Quantity_Purchased: Number of units of the product purchased.\n",
      "Total_Sale_Amount: Total amount of the sale for the product.\n",
      "Discount_Applied: Amount of discount applied to the sale.\n",
      "Payment_Method: Payment method used for the transaction.\n",
      "Inventory_Stock_At_Sale: Stock level of the product at the time of sale.\n",
      "Order_Status: Status of the order (e.g., Completed, Cancelled).\n",
      "Delivery_Method: Delivery method used for the order (e.g., Home Delivery, Curbside Pickup).\n",
      "Delivery_Status: Status of the delivery (e.g., Delivered, Not Applicable).\n",
      "Question: Generate a SQL query to calculate the average monthly sales across customer id. Also provide their most preferred product category and most preferred store\n",
      "SQLQuery:\u001b[32;1m\u001b[1;3mSELECT Customer_ID, STRFTIME('%Y-%m', Order_Date) AS sales_month, AVG(Total_Sale_Amount) AS avg_monthly_sales,  ( SELECT Product_Category FROM sales_data WHERE Customer_ID = t1.Customer_ID GROUP BY Product_Category ORDER BY SUM(Total_Sale_Amount) DESC LIMIT 1 ) AS most_preferred_product_category, ( SELECT Store_Location FROM sales_data WHERE Customer_ID = t1.Customer_ID GROUP BY Store_Location ORDER BY SUM(Total_Sale_Amount) DESC LIMIT 1 ) AS most_preferred_store FROM sales_data t1 GROUP BY Customer_ID, sales_month\u001b[0m\n",
      "SQLResult: \u001b[33;1m\u001b[1;3m[(505, '2025-04', 24.1, 'Home Improvement', 'Atlanta, GA'), (507, '2025-04', 38.945, 'Home Care', 'Phoenix, AZ'), (509, '2025-03', 2126.96, 'Electronics', 'Atlanta, GA'), (511, '2025-03', 213.89, 'Electronics', 'Chicago, IL'), (515, '2025-04', 415.2425, 'Electronics', 'Chicago, IL'), (516, '2025-03', 18.718, 'Grocery', 'Dallas, TX'), (516, '2025-04', 15.35, 'Grocery', 'Dallas, TX'), (519, '2025-03', 466.81, 'Electronics', 'Dallas, TX'), (521, '2025-04', 42.73, 'Apparel', 'Atlanta, GA'), (523, '2025-04', 6.95, 'Home Improvement', 'Atlanta, GA'), (526, '2025-03', 33.17, 'Apparel', 'Atlanta, GA'), (527, '2025-03', 23.035, 'Grocery', 'Phoenix, AZ'), (528, '2025-03', 572.99, 'Electronics', 'Atlanta, GA'), (532, '2025-03', 436.4166666666667, 'Electronics', 'Dallas, TX'), (533, '2025-03', 53.715, 'Apparel', 'Chicago, IL'), (537, '2025-03', 331.3175, 'Electronics', 'Phoenix, AZ'), (538, '2025-04', 42.86, 'Grocery', 'Atlanta, GA'), (540, '2025-04', 31.36, 'Home Improvement', 'Phoenix, AZ'), (542, '2025-03', 65.35, 'Electronics', 'Phoenix, AZ'), (542, '2025-04', 22.08, 'Electronics', 'Phoenix, AZ'), (543, '2025-03', 13.87, 'Home Improvement', 'Phoenix, AZ'), (546, '2025-04', 1368.42, 'Electronics', 'Chicago, IL'), (547, '2025-04', 31.835, 'Home Improvement', 'Dallas, TX'), (548, '2025-03', 136.47, 'Electronics', 'Chicago, IL'), (548, '2025-04', 452.59666666666664, 'Electronics', 'Chicago, IL'), (551, '2025-03', 109.32499999999999, 'Electronics', 'Phoenix, AZ'), (551, '2025-04', 28.15, 'Electronics', 'Phoenix, AZ'), (553, '2025-03', 21.96, 'Home Improvement', 'Phoenix, AZ'), (554, '2025-04', 305.9542857142857, 'Electronics', 'Dallas, TX'), (556, '2025-04', 1098.4233333333334, 'Electronics', 'Phoenix, AZ'), (557, '2025-04', 39.43, 'Home Improvement', 'Dallas, TX'), (558, '2025-04', 8.99, 'Grocery', 'Phoenix, AZ'), (559, '2025-04', 41.34, 'Home Care', 'Dallas, TX'), (562, '2025-04', 1122.095, 'Electronics', 'Phoenix, AZ'), (567, '2025-04', 503.09799999999996, 'Electronics', 'Dallas, TX'), (569, '2025-04', 11.73, 'Apparel', 'Atlanta, GA'), (571, '2025-04', 33.964999999999996, 'Electronics', 'Chicago, IL'), (574, '2025-03', 28.275, 'Home Improvement', 'Chicago, IL'), (577, '2025-04', 21.23, 'Home Improvement', 'Dallas, TX'), (578, '2025-04', 12.94, 'Grocery', 'Chicago, IL'), (579, '2025-04', 50.29, 'Apparel', 'Phoenix, AZ'), (583, '2025-03', 9.69, 'Grocery', 'Dallas, TX'), (584, '2025-04', 59.86, 'Apparel', 'Chicago, IL'), (586, '2025-04', 33.035000000000004, 'Home Care', 'Chicago, IL'), (587, '2025-04', 33.512, 'Electronics', 'Phoenix, AZ'), (591, '2025-03', 249.755, 'Electronics', 'Atlanta, GA'), (591, '2025-04', 158.62, 'Electronics', 'Atlanta, GA'), (592, '2025-04', 43.18, 'Apparel', 'Atlanta, GA'), (593, '2025-03', 12.85, 'Grocery', 'Chicago, IL'), (594, '2025-03', 25.8, 'Apparel', 'Atlanta, GA'), (597, '2025-03', 26.85, 'Home Care', 'Phoenix, AZ'), (600, '2025-04', 47.38, 'Apparel', 'Atlanta, GA')]\u001b[0m\n",
      "Answer:\u001b[32;1m\u001b[1;3m```sql\n",
      "SELECT\n",
      "  Customer_ID,\n",
      "  STRFTIME('%Y-%m', Order_Date) AS sales_month,\n",
      "  AVG(Total_Sale_Amount) AS avg_monthly_sales,\n",
      "  (\n",
      "    SELECT\n",
      "      Product_Category\n",
      "    FROM sales_data\n",
      "    WHERE\n",
      "      Customer_ID = t1.Customer_ID\n",
      "    GROUP BY\n",
      "      Product_Category\n",
      "    ORDER BY\n",
      "      SUM(Total_Sale_Amount) DESC\n",
      "    LIMIT 1\n",
      "  ) AS most_preferred_product_category,\n",
      "  (\n",
      "    SELECT\n",
      "      Store_Location\n",
      "    FROM sales_data\n",
      "    WHERE\n",
      "      Customer_ID = t1.Customer_ID\n",
      "    GROUP BY\n",
      "      Store_Location\n",
      "    ORDER BY\n",
      "      SUM(Total_Sale_Amount) DESC\n",
      "    LIMIT 1\n",
      "  ) AS most_preferred_store\n",
      "FROM sales_data AS t1\n",
      "GROUP BY\n",
      "  Customer_ID,\n",
      "  sales_month;\n",
      "```\u001b[0m\n",
      "\u001b[1m> Finished chain.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "global_dict = {}\n",
    "local_dict = {}\n",
    "\n",
    "query_test = \"Generate a SQL query to calculate the average monthly sales across customer id. Also provide their most preferred product category and most preferred store\"\n",
    "\n",
    "df = generate_df_from_query(query_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "1e0dcbbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "import pandas as pd\n",
      "from sklearn.preprocessing import OneHotEncoder\n",
      "from sklearn.feature_selection import mutual_info_classif\n",
      "\n",
      "# Identify categorical columns\n",
      "categorical_cols = ['sales_month', 'most_preferred_product_category', 'most_preferred_store']\n",
      "\n",
      "# Assuming 'df' is the DataFrame\n",
      "# Create a copy to avoid modifying the original DataFrame\n",
      "encoded_df = df.copy()\n",
      "\n",
      "# One-hot encoding for low cardinality categorical features\n",
      "ohe = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
      "encoded_data = ohe.fit_transform(encoded_df[categorical_cols])\n",
      "encoded_df = encoded_df.drop(columns=categorical_cols)\n",
      "feature_names = ohe.get_feature_names_out(categorical_cols)\n",
      "encoded_df = pd.concat([encoded_df, pd.DataFrame(encoded_data, columns=feature_names)], axis=1)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_result = auto_feature_engineering(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c58d98ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer_ID</th>\n",
       "      <th>avg_monthly_sales</th>\n",
       "      <th>sales_month_2025-03</th>\n",
       "      <th>sales_month_2025-04</th>\n",
       "      <th>most_preferred_product_category_Apparel</th>\n",
       "      <th>most_preferred_product_category_Electronics</th>\n",
       "      <th>most_preferred_product_category_Grocery</th>\n",
       "      <th>most_preferred_product_category_Home Care</th>\n",
       "      <th>most_preferred_product_category_Home Improvement</th>\n",
       "      <th>most_preferred_store_Atlanta, GA</th>\n",
       "      <th>most_preferred_store_Chicago, IL</th>\n",
       "      <th>most_preferred_store_Dallas, TX</th>\n",
       "      <th>most_preferred_store_Phoenix, AZ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>505</td>\n",
       "      <td>24.100000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>507</td>\n",
       "      <td>38.945000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>509</td>\n",
       "      <td>2126.960000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>511</td>\n",
       "      <td>213.890000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>515</td>\n",
       "      <td>415.242500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>516</td>\n",
       "      <td>18.718000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>516</td>\n",
       "      <td>15.350000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>519</td>\n",
       "      <td>466.810000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>521</td>\n",
       "      <td>42.730000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>523</td>\n",
       "      <td>6.950000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>526</td>\n",
       "      <td>33.170000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>527</td>\n",
       "      <td>23.035000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>528</td>\n",
       "      <td>572.990000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>532</td>\n",
       "      <td>436.416667</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>533</td>\n",
       "      <td>53.715000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>537</td>\n",
       "      <td>331.317500</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>538</td>\n",
       "      <td>42.860000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>540</td>\n",
       "      <td>31.360000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>542</td>\n",
       "      <td>65.350000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>542</td>\n",
       "      <td>22.080000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>543</td>\n",
       "      <td>13.870000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>546</td>\n",
       "      <td>1368.420000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>547</td>\n",
       "      <td>31.835000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>548</td>\n",
       "      <td>136.470000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>548</td>\n",
       "      <td>452.596667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>551</td>\n",
       "      <td>109.325000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>551</td>\n",
       "      <td>28.150000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>553</td>\n",
       "      <td>21.960000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>554</td>\n",
       "      <td>305.954286</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>556</td>\n",
       "      <td>1098.423333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>557</td>\n",
       "      <td>39.430000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>558</td>\n",
       "      <td>8.990000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>559</td>\n",
       "      <td>41.340000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>562</td>\n",
       "      <td>1122.095000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>567</td>\n",
       "      <td>503.098000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>569</td>\n",
       "      <td>11.730000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>571</td>\n",
       "      <td>33.965000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>574</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>577</td>\n",
       "      <td>21.230000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>578</td>\n",
       "      <td>12.940000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>579</td>\n",
       "      <td>50.290000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>583</td>\n",
       "      <td>9.690000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>584</td>\n",
       "      <td>59.860000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>586</td>\n",
       "      <td>33.035000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>587</td>\n",
       "      <td>33.512000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>591</td>\n",
       "      <td>249.755000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>591</td>\n",
       "      <td>158.620000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>592</td>\n",
       "      <td>43.180000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>593</td>\n",
       "      <td>12.850000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>594</td>\n",
       "      <td>25.800000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>597</td>\n",
       "      <td>26.850000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>600</td>\n",
       "      <td>47.380000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Customer_ID  avg_monthly_sales  sales_month_2025-03  sales_month_2025-04  \\\n",
       "0           505          24.100000                  0.0                  1.0   \n",
       "1           507          38.945000                  0.0                  1.0   \n",
       "2           509        2126.960000                  1.0                  0.0   \n",
       "3           511         213.890000                  1.0                  0.0   \n",
       "4           515         415.242500                  0.0                  1.0   \n",
       "5           516          18.718000                  1.0                  0.0   \n",
       "6           516          15.350000                  0.0                  1.0   \n",
       "7           519         466.810000                  1.0                  0.0   \n",
       "8           521          42.730000                  0.0                  1.0   \n",
       "9           523           6.950000                  0.0                  1.0   \n",
       "10          526          33.170000                  1.0                  0.0   \n",
       "11          527          23.035000                  1.0                  0.0   \n",
       "12          528         572.990000                  1.0                  0.0   \n",
       "13          532         436.416667                  1.0                  0.0   \n",
       "14          533          53.715000                  1.0                  0.0   \n",
       "15          537         331.317500                  1.0                  0.0   \n",
       "16          538          42.860000                  0.0                  1.0   \n",
       "17          540          31.360000                  0.0                  1.0   \n",
       "18          542          65.350000                  1.0                  0.0   \n",
       "19          542          22.080000                  0.0                  1.0   \n",
       "20          543          13.870000                  1.0                  0.0   \n",
       "21          546        1368.420000                  0.0                  1.0   \n",
       "22          547          31.835000                  0.0                  1.0   \n",
       "23          548         136.470000                  1.0                  0.0   \n",
       "24          548         452.596667                  0.0                  1.0   \n",
       "25          551         109.325000                  1.0                  0.0   \n",
       "26          551          28.150000                  0.0                  1.0   \n",
       "27          553          21.960000                  1.0                  0.0   \n",
       "28          554         305.954286                  0.0                  1.0   \n",
       "29          556        1098.423333                  0.0                  1.0   \n",
       "30          557          39.430000                  0.0                  1.0   \n",
       "31          558           8.990000                  0.0                  1.0   \n",
       "32          559          41.340000                  0.0                  1.0   \n",
       "33          562        1122.095000                  0.0                  1.0   \n",
       "34          567         503.098000                  0.0                  1.0   \n",
       "35          569          11.730000                  0.0                  1.0   \n",
       "36          571          33.965000                  0.0                  1.0   \n",
       "37          574          28.275000                  1.0                  0.0   \n",
       "38          577          21.230000                  0.0                  1.0   \n",
       "39          578          12.940000                  0.0                  1.0   \n",
       "40          579          50.290000                  0.0                  1.0   \n",
       "41          583           9.690000                  1.0                  0.0   \n",
       "42          584          59.860000                  0.0                  1.0   \n",
       "43          586          33.035000                  0.0                  1.0   \n",
       "44          587          33.512000                  0.0                  1.0   \n",
       "45          591         249.755000                  1.0                  0.0   \n",
       "46          591         158.620000                  0.0                  1.0   \n",
       "47          592          43.180000                  0.0                  1.0   \n",
       "48          593          12.850000                  1.0                  0.0   \n",
       "49          594          25.800000                  1.0                  0.0   \n",
       "50          597          26.850000                  1.0                  0.0   \n",
       "51          600          47.380000                  0.0                  1.0   \n",
       "\n",
       "    most_preferred_product_category_Apparel  \\\n",
       "0                                       0.0   \n",
       "1                                       0.0   \n",
       "2                                       0.0   \n",
       "3                                       0.0   \n",
       "4                                       0.0   \n",
       "5                                       0.0   \n",
       "6                                       0.0   \n",
       "7                                       0.0   \n",
       "8                                       1.0   \n",
       "9                                       0.0   \n",
       "10                                      1.0   \n",
       "11                                      0.0   \n",
       "12                                      0.0   \n",
       "13                                      0.0   \n",
       "14                                      1.0   \n",
       "15                                      0.0   \n",
       "16                                      0.0   \n",
       "17                                      0.0   \n",
       "18                                      0.0   \n",
       "19                                      0.0   \n",
       "20                                      0.0   \n",
       "21                                      0.0   \n",
       "22                                      0.0   \n",
       "23                                      0.0   \n",
       "24                                      0.0   \n",
       "25                                      0.0   \n",
       "26                                      0.0   \n",
       "27                                      0.0   \n",
       "28                                      0.0   \n",
       "29                                      0.0   \n",
       "30                                      0.0   \n",
       "31                                      0.0   \n",
       "32                                      0.0   \n",
       "33                                      0.0   \n",
       "34                                      0.0   \n",
       "35                                      1.0   \n",
       "36                                      0.0   \n",
       "37                                      0.0   \n",
       "38                                      0.0   \n",
       "39                                      0.0   \n",
       "40                                      1.0   \n",
       "41                                      0.0   \n",
       "42                                      1.0   \n",
       "43                                      0.0   \n",
       "44                                      0.0   \n",
       "45                                      0.0   \n",
       "46                                      0.0   \n",
       "47                                      1.0   \n",
       "48                                      0.0   \n",
       "49                                      1.0   \n",
       "50                                      0.0   \n",
       "51                                      1.0   \n",
       "\n",
       "    most_preferred_product_category_Electronics  \\\n",
       "0                                           0.0   \n",
       "1                                           0.0   \n",
       "2                                           1.0   \n",
       "3                                           1.0   \n",
       "4                                           1.0   \n",
       "5                                           0.0   \n",
       "6                                           0.0   \n",
       "7                                           1.0   \n",
       "8                                           0.0   \n",
       "9                                           0.0   \n",
       "10                                          0.0   \n",
       "11                                          0.0   \n",
       "12                                          1.0   \n",
       "13                                          1.0   \n",
       "14                                          0.0   \n",
       "15                                          1.0   \n",
       "16                                          0.0   \n",
       "17                                          0.0   \n",
       "18                                          1.0   \n",
       "19                                          1.0   \n",
       "20                                          0.0   \n",
       "21                                          1.0   \n",
       "22                                          0.0   \n",
       "23                                          1.0   \n",
       "24                                          1.0   \n",
       "25                                          1.0   \n",
       "26                                          1.0   \n",
       "27                                          0.0   \n",
       "28                                          1.0   \n",
       "29                                          1.0   \n",
       "30                                          0.0   \n",
       "31                                          0.0   \n",
       "32                                          0.0   \n",
       "33                                          1.0   \n",
       "34                                          1.0   \n",
       "35                                          0.0   \n",
       "36                                          1.0   \n",
       "37                                          0.0   \n",
       "38                                          0.0   \n",
       "39                                          0.0   \n",
       "40                                          0.0   \n",
       "41                                          0.0   \n",
       "42                                          0.0   \n",
       "43                                          0.0   \n",
       "44                                          1.0   \n",
       "45                                          1.0   \n",
       "46                                          1.0   \n",
       "47                                          0.0   \n",
       "48                                          0.0   \n",
       "49                                          0.0   \n",
       "50                                          0.0   \n",
       "51                                          0.0   \n",
       "\n",
       "    most_preferred_product_category_Grocery  \\\n",
       "0                                       0.0   \n",
       "1                                       0.0   \n",
       "2                                       0.0   \n",
       "3                                       0.0   \n",
       "4                                       0.0   \n",
       "5                                       1.0   \n",
       "6                                       1.0   \n",
       "7                                       0.0   \n",
       "8                                       0.0   \n",
       "9                                       0.0   \n",
       "10                                      0.0   \n",
       "11                                      1.0   \n",
       "12                                      0.0   \n",
       "13                                      0.0   \n",
       "14                                      0.0   \n",
       "15                                      0.0   \n",
       "16                                      1.0   \n",
       "17                                      0.0   \n",
       "18                                      0.0   \n",
       "19                                      0.0   \n",
       "20                                      0.0   \n",
       "21                                      0.0   \n",
       "22                                      0.0   \n",
       "23                                      0.0   \n",
       "24                                      0.0   \n",
       "25                                      0.0   \n",
       "26                                      0.0   \n",
       "27                                      0.0   \n",
       "28                                      0.0   \n",
       "29                                      0.0   \n",
       "30                                      0.0   \n",
       "31                                      1.0   \n",
       "32                                      0.0   \n",
       "33                                      0.0   \n",
       "34                                      0.0   \n",
       "35                                      0.0   \n",
       "36                                      0.0   \n",
       "37                                      0.0   \n",
       "38                                      0.0   \n",
       "39                                      1.0   \n",
       "40                                      0.0   \n",
       "41                                      1.0   \n",
       "42                                      0.0   \n",
       "43                                      0.0   \n",
       "44                                      0.0   \n",
       "45                                      0.0   \n",
       "46                                      0.0   \n",
       "47                                      0.0   \n",
       "48                                      1.0   \n",
       "49                                      0.0   \n",
       "50                                      0.0   \n",
       "51                                      0.0   \n",
       "\n",
       "    most_preferred_product_category_Home Care  \\\n",
       "0                                         0.0   \n",
       "1                                         1.0   \n",
       "2                                         0.0   \n",
       "3                                         0.0   \n",
       "4                                         0.0   \n",
       "5                                         0.0   \n",
       "6                                         0.0   \n",
       "7                                         0.0   \n",
       "8                                         0.0   \n",
       "9                                         0.0   \n",
       "10                                        0.0   \n",
       "11                                        0.0   \n",
       "12                                        0.0   \n",
       "13                                        0.0   \n",
       "14                                        0.0   \n",
       "15                                        0.0   \n",
       "16                                        0.0   \n",
       "17                                        0.0   \n",
       "18                                        0.0   \n",
       "19                                        0.0   \n",
       "20                                        0.0   \n",
       "21                                        0.0   \n",
       "22                                        0.0   \n",
       "23                                        0.0   \n",
       "24                                        0.0   \n",
       "25                                        0.0   \n",
       "26                                        0.0   \n",
       "27                                        0.0   \n",
       "28                                        0.0   \n",
       "29                                        0.0   \n",
       "30                                        0.0   \n",
       "31                                        0.0   \n",
       "32                                        1.0   \n",
       "33                                        0.0   \n",
       "34                                        0.0   \n",
       "35                                        0.0   \n",
       "36                                        0.0   \n",
       "37                                        0.0   \n",
       "38                                        0.0   \n",
       "39                                        0.0   \n",
       "40                                        0.0   \n",
       "41                                        0.0   \n",
       "42                                        0.0   \n",
       "43                                        1.0   \n",
       "44                                        0.0   \n",
       "45                                        0.0   \n",
       "46                                        0.0   \n",
       "47                                        0.0   \n",
       "48                                        0.0   \n",
       "49                                        0.0   \n",
       "50                                        1.0   \n",
       "51                                        0.0   \n",
       "\n",
       "    most_preferred_product_category_Home Improvement  \\\n",
       "0                                                1.0   \n",
       "1                                                0.0   \n",
       "2                                                0.0   \n",
       "3                                                0.0   \n",
       "4                                                0.0   \n",
       "5                                                0.0   \n",
       "6                                                0.0   \n",
       "7                                                0.0   \n",
       "8                                                0.0   \n",
       "9                                                1.0   \n",
       "10                                               0.0   \n",
       "11                                               0.0   \n",
       "12                                               0.0   \n",
       "13                                               0.0   \n",
       "14                                               0.0   \n",
       "15                                               0.0   \n",
       "16                                               0.0   \n",
       "17                                               1.0   \n",
       "18                                               0.0   \n",
       "19                                               0.0   \n",
       "20                                               1.0   \n",
       "21                                               0.0   \n",
       "22                                               1.0   \n",
       "23                                               0.0   \n",
       "24                                               0.0   \n",
       "25                                               0.0   \n",
       "26                                               0.0   \n",
       "27                                               1.0   \n",
       "28                                               0.0   \n",
       "29                                               0.0   \n",
       "30                                               1.0   \n",
       "31                                               0.0   \n",
       "32                                               0.0   \n",
       "33                                               0.0   \n",
       "34                                               0.0   \n",
       "35                                               0.0   \n",
       "36                                               0.0   \n",
       "37                                               1.0   \n",
       "38                                               1.0   \n",
       "39                                               0.0   \n",
       "40                                               0.0   \n",
       "41                                               0.0   \n",
       "42                                               0.0   \n",
       "43                                               0.0   \n",
       "44                                               0.0   \n",
       "45                                               0.0   \n",
       "46                                               0.0   \n",
       "47                                               0.0   \n",
       "48                                               0.0   \n",
       "49                                               0.0   \n",
       "50                                               0.0   \n",
       "51                                               0.0   \n",
       "\n",
       "    most_preferred_store_Atlanta, GA  most_preferred_store_Chicago, IL  \\\n",
       "0                                1.0                               0.0   \n",
       "1                                0.0                               0.0   \n",
       "2                                1.0                               0.0   \n",
       "3                                0.0                               1.0   \n",
       "4                                0.0                               1.0   \n",
       "5                                0.0                               0.0   \n",
       "6                                0.0                               0.0   \n",
       "7                                0.0                               0.0   \n",
       "8                                1.0                               0.0   \n",
       "9                                1.0                               0.0   \n",
       "10                               1.0                               0.0   \n",
       "11                               0.0                               0.0   \n",
       "12                               1.0                               0.0   \n",
       "13                               0.0                               0.0   \n",
       "14                               0.0                               1.0   \n",
       "15                               0.0                               0.0   \n",
       "16                               1.0                               0.0   \n",
       "17                               0.0                               0.0   \n",
       "18                               0.0                               0.0   \n",
       "19                               0.0                               0.0   \n",
       "20                               0.0                               0.0   \n",
       "21                               0.0                               1.0   \n",
       "22                               0.0                               0.0   \n",
       "23                               0.0                               1.0   \n",
       "24                               0.0                               1.0   \n",
       "25                               0.0                               0.0   \n",
       "26                               0.0                               0.0   \n",
       "27                               0.0                               0.0   \n",
       "28                               0.0                               0.0   \n",
       "29                               0.0                               0.0   \n",
       "30                               0.0                               0.0   \n",
       "31                               0.0                               0.0   \n",
       "32                               0.0                               0.0   \n",
       "33                               0.0                               0.0   \n",
       "34                               0.0                               0.0   \n",
       "35                               1.0                               0.0   \n",
       "36                               0.0                               1.0   \n",
       "37                               0.0                               1.0   \n",
       "38                               0.0                               0.0   \n",
       "39                               0.0                               1.0   \n",
       "40                               0.0                               0.0   \n",
       "41                               0.0                               0.0   \n",
       "42                               0.0                               1.0   \n",
       "43                               0.0                               1.0   \n",
       "44                               0.0                               0.0   \n",
       "45                               1.0                               0.0   \n",
       "46                               1.0                               0.0   \n",
       "47                               1.0                               0.0   \n",
       "48                               0.0                               1.0   \n",
       "49                               1.0                               0.0   \n",
       "50                               0.0                               0.0   \n",
       "51                               1.0                               0.0   \n",
       "\n",
       "    most_preferred_store_Dallas, TX  most_preferred_store_Phoenix, AZ  \n",
       "0                               0.0                               0.0  \n",
       "1                               0.0                               1.0  \n",
       "2                               0.0                               0.0  \n",
       "3                               0.0                               0.0  \n",
       "4                               0.0                               0.0  \n",
       "5                               1.0                               0.0  \n",
       "6                               1.0                               0.0  \n",
       "7                               1.0                               0.0  \n",
       "8                               0.0                               0.0  \n",
       "9                               0.0                               0.0  \n",
       "10                              0.0                               0.0  \n",
       "11                              0.0                               1.0  \n",
       "12                              0.0                               0.0  \n",
       "13                              1.0                               0.0  \n",
       "14                              0.0                               0.0  \n",
       "15                              0.0                               1.0  \n",
       "16                              0.0                               0.0  \n",
       "17                              0.0                               1.0  \n",
       "18                              0.0                               1.0  \n",
       "19                              0.0                               1.0  \n",
       "20                              0.0                               1.0  \n",
       "21                              0.0                               0.0  \n",
       "22                              1.0                               0.0  \n",
       "23                              0.0                               0.0  \n",
       "24                              0.0                               0.0  \n",
       "25                              0.0                               1.0  \n",
       "26                              0.0                               1.0  \n",
       "27                              0.0                               1.0  \n",
       "28                              1.0                               0.0  \n",
       "29                              0.0                               1.0  \n",
       "30                              1.0                               0.0  \n",
       "31                              0.0                               1.0  \n",
       "32                              1.0                               0.0  \n",
       "33                              0.0                               1.0  \n",
       "34                              1.0                               0.0  \n",
       "35                              0.0                               0.0  \n",
       "36                              0.0                               0.0  \n",
       "37                              0.0                               0.0  \n",
       "38                              1.0                               0.0  \n",
       "39                              0.0                               0.0  \n",
       "40                              0.0                               1.0  \n",
       "41                              1.0                               0.0  \n",
       "42                              0.0                               0.0  \n",
       "43                              0.0                               0.0  \n",
       "44                              0.0                               1.0  \n",
       "45                              0.0                               0.0  \n",
       "46                              0.0                               0.0  \n",
       "47                              0.0                               0.0  \n",
       "48                              0.0                               0.0  \n",
       "49                              0.0                               0.0  \n",
       "50                              0.0                               1.0  \n",
       "51                              0.0                               0.0  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b988a388",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34dec0b9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac1040b7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
